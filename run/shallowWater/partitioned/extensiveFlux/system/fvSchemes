/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          fvSchemes;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}
offCentre 1;

gradSchemes
{
    default         none;
    linearUpwind    leastSquares;
    grad(streamFunction) Gauss linear;
    curl((streamFunction*(0,0,1))) Gauss linear;
    grad(h)         Gauss linear;
    curl(U)         Gauss linear;
    grad(divPhi)    Gauss linear;
    grad(curl(Uf))  Gauss linear;
    grad(p)  Gauss linear;
}

divSchemes
{
    default         none;
    div(stable.flux,stable.u) Gauss upwind;
    div(buoyant.flux,buoyant.u) Gauss upwind;
}

laplacianSchemes
{
    default         none;
    laplacian(streamFunction) Gauss linear uncorrected;
    laplacian(((deltaT*g)*hf),h)  Gauss linear uncorrected;
    laplacian((1|A(U)),p) Gauss linear uncorrected;
}

interpolationSchemes
{
    default            none;
    interpolate((stable.sigma*h)) upwind stable.flux;
    interpolate((buoyant.sigma*h)) upwind buoyant.flux;
    interpolate(stable.sigma) upwind stable.flux;
    interpolate(buoyant.sigma) upwind buoyant.flux;
    interpolate(h)     linear;
    interpolate(convection(stable.flux,stable.u)) upwind stable.flux;
    interpolate(convection(buoyant.flux,buoyant.u)) upwind buoyant.flux;
    interpolate(stable.u) upwind stable.flux;
    interpolate(buoyant.u) upwind buoyant.flux;
}

snGradSchemes
{
    default         none;
    snGrad(h)       uncorrected;
    snGrad(p)       uncorrected;
}

fluxRequired
{
    default         no;
    h;
}


// ************************************************************************* //
